name: 'Terraform Azure Deployment'

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.0

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        
    - name: Register Azure Resource Providers
      run: |
        echo "Registering required Azure resource providers..."
        az provider register --namespace Microsoft.App
        az provider register --namespace Microsoft.OperationalInsights
        
        echo "Checking registration status..."
        az provider show -n Microsoft.App --query registrationState -o tsv
        az provider show -n Microsoft.OperationalInsights --query registrationState -o tsv
        
    - name: Extract Azure Service Principal credentials
      id: extract-sp
      run: |
        echo "subscription_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.subscriptionId')" >> $GITHUB_OUTPUT
        echo "tenant_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.tenantId')" >> $GITHUB_OUTPUT
        echo "client_id=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientId')" >> $GITHUB_OUTPUT
        echo "client_secret=$(echo '${{ secrets.AZURE_CREDENTIALS }}' | jq -r '.clientSecret')" >> $GITHUB_OUTPUT
    
    # Set up the Terraform backend infrastructure first
    - name: Create Backend Infrastructure
      run: |
        mkdir -p scripts
        cat > scripts/setup_backend.sh << 'EOF'
        #!/bin/bash
        
        # Set variables
        RESOURCE_GROUP_NAME="terraform-state-rg"
        STORAGE_ACCOUNT_NAME="tfstateralfv2"
        CONTAINER_NAME="tfstate"
        LOCATION="eastus"
        
        # Create resource group
        echo "Creating resource group $RESOURCE_GROUP_NAME..."
        az group create --name $RESOURCE_GROUP_NAME --location $LOCATION
        
        # Create storage account
        echo "Creating storage account $STORAGE_ACCOUNT_NAME..."
        az storage account create --resource-group $RESOURCE_GROUP_NAME --name $STORAGE_ACCOUNT_NAME --sku Standard_LRS --encryption-services blob
        
        # Create blob container
        echo "Creating blob container $CONTAINER_NAME..."
        az storage container create --name $CONTAINER_NAME --account-name $STORAGE_ACCOUNT_NAME --resource-group $RESOURCE_GROUP_NAME
        EOF
        
        chmod +x scripts/setup_backend.sh
        ./scripts/setup_backend.sh

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="subscription_id=${{ steps.extract-sp.outputs.subscription_id }}" \
          -backend-config="tenant_id=${{ steps.extract-sp.outputs.tenant_id }}" \
          -backend-config="client_id=${{ steps.extract-sp.outputs.client_id }}" \
          -backend-config="client_secret=${{ steps.extract-sp.outputs.client_secret }}"
      working-directory: ./terraform

    # First, create only the resource group and ACR
    - name: Deploy Base Infrastructure (Resource Group and ACR)
      run: |
        terraform apply -auto-approve -target=azurerm_resource_group.example -target=azurerm_container_registry.acr
      working-directory: ./terraform
      
    # Extract ACR login server using Terraform output - FIXED
    - name: Extract ACR Login Server
      id: acr-login
      run: |
        cd ./terraform
        # Use a cleaner way to extract just the ACR login server value
        ACR_LOGIN_SERVER=$(terraform output -raw acr_login_server | tr -d '\n')
        echo "ACR Login Server: $ACR_LOGIN_SERVER"
        # Verify the value looks correct
        if [[ ! "$ACR_LOGIN_SERVER" =~ .*\.azurecr\.io$ ]]; then
          echo "Error: Invalid ACR login server format: $ACR_LOGIN_SERVER"
          exit 1
        fi
        # Set as environment variable and output
        echo "ACR_LOGIN_SERVER=$ACR_LOGIN_SERVER" >> $GITHUB_ENV
        echo "server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
      shell: bash
      
    # Log in to Azure Container Registry - FIXED
    - name: Log in to Azure Container Registry
      run: |
        ACR_LOGIN_SERVER="${{ env.ACR_LOGIN_SERVER }}"
        if [ -z "$ACR_LOGIN_SERVER" ]; then
          echo "Error: ACR_LOGIN_SERVER is not set"
          exit 1
        fi
        
        ACR_NAME=$(echo "$ACR_LOGIN_SERVER" | cut -d'.' -f1)
        echo "ACR Name: $ACR_NAME"
        
        # Validate ACR name format
        if [[ ! $ACR_NAME =~ ^[a-zA-Z0-9]+$ ]] || [ ${#ACR_NAME} -lt 5 ] || [ ${#ACR_NAME} -gt 50 ]; then
          echo "Error: Invalid ACR name format: $ACR_NAME"
          exit 1
        fi
        
        echo "Logging in to ACR: $ACR_NAME"
        az acr login --name "$ACR_NAME" || { echo "Failed to login to ACR"; exit 1; }
      shell: bash
      
    # Build and push Docker image
    - name: Build and push Docker image
      run: |
        ACR_LOGIN_SERVER="${{ env.ACR_LOGIN_SERVER }}"
        echo "Building and pushing to $ACR_LOGIN_SERVER/imgralfuatv2:latest"
        docker build -t "$ACR_LOGIN_SERVER/imgralfuatv2:latest" . || { echo "Docker build failed"; exit 1; }
        docker push "$ACR_LOGIN_SERVER/imgralfuatv2:latest" || { echo "Docker push failed"; exit 1; }
      shell: bash

    # Finally, deploy the rest of the infrastructure including Container App
    - name: Deploy Remaining Infrastructure
      run: terraform apply -auto-approve
      working-directory: ./terraform